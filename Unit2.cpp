//---------------------------------------------------------------------------

#include <vcl.h>
#include <stdio.h>
#pragma hdrstop

#include "Unit2.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "SkinCtrls"
#pragma link "CGRID"
#pragma resource "*.dfm"
TForm1 *Form1;
BYTE palette[256][3];
#define calcoffset(_x, _y, _h) ((_h * _x) + _y)

const unsigned char Def_RGB[] = {
				0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00,
				0x00, 0xFF, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
				0xFF, 0x00, 0x80, 0x80, 0x00, 0xFF, 0xFF, 0x00,
				0x00, 0x00, 0x80, 0x00, 0x00, 0xFF, 0x80, 0x00,
				0x80, 0xFF, 0x00, 0xFF, 0x00, 0x80, 0x80, 0x00,
				0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF,
				0x60, 0x60, 0x60, 0xE0, 0xE0, 0xE0, 0x80, 0x40,
				0x00, 0xFF, 0x80, 0x00, 0x00, 0x60, 0x20, 0x00,
				0xC0, 0x40, 0xC0, 0x80, 0x00, 0xFF, 0xFF, 0x80,
				0x00, 0x40, 0x80, 0x00, 0x80, 0xFF, 0x60, 0x00,
				0xC0, 0xE0, 0x00, 0x80, 0x00, 0x60, 0x80, 0x00,
				0xC0, 0xFF, 0xD8, 0xD8, 0xD8, 0xF8, 0xF8, 0xF8,
				0x40, 0x00, 0x00, 0xFF, 0x80, 0x40, 0x00, 0x40,
				0x40, 0x00, 0x80, 0x40, 0x80, 0x40, 0x40, 0x80,
				0x80, 0x40, 0x80, 0xFF, 0x00, 0x80, 0xFF, 0x80,
				0x00, 0xFF, 0x80, 0x80, 0xFF, 0xFF, 0x00, 0x00,
				0xA0, 0x80, 0x80, 0xFF, 0x40, 0x00, 0x80, 0x80,
				0x00, 0xFF, 0x00, 0x00, 0x40, 0x00, 0x80, 0xC0,
				0x00, 0x10, 0xE0, 0x20, 0xA4, 0xFF, 0xC0, 0x80,
				0x00, 0xFF, 0xC0, 0x00, 0x94, 0x18, 0x00, 0xFF,
				0x40, 0x10, 0x20, 0x60, 0x00, 0x00, 0xC0, 0x00,
				0xFF, 0xE8, 0x60, 0xFF, 0xF8, 0xC0, 0x40, 0xE0,
				0xFF, 0xC0, 0xFF, 0xFF, 0xF8, 0xA4, 0xF8, 0xFF,
				0xE0, 0xFF, 0xE8, 0xE8, 0xE8, 0xFC, 0xFC, 0xFC,
				0x00, 0x30, 0xFF, 0x10, 0x3D, 0xFF, 0x21, 0x4B,
				0xFF, 0x31, 0x58, 0xFF, 0x41, 0x65, 0xFF, 0x52,
				0x72, 0xFF, 0x62, 0x80, 0xFF, 0x72, 0x8D, 0xFF,
				0x83, 0x9A, 0xFF, 0x93, 0xA7, 0xFF, 0xA3, 0xB5,
				0xFF, 0xB4, 0xC2, 0xFF, 0xC4, 0xCF, 0xFF, 0xD4,
				0xDC, 0xFF, 0xE5, 0xEA, 0xFF, 0xF5, 0xF7, 0xFF,
				0xFF, 0x18, 0x18, 0xFF, 0x27, 0x27, 0xFF, 0x36,
				0x36, 0xFF, 0x45, 0x45, 0xFF, 0x54, 0x54, 0xFF,
				0x63, 0x63, 0xFF, 0x72, 0x72, 0xFF, 0x81, 0x81,
				0xFF, 0x91, 0x91, 0xFF, 0xA0, 0xA0, 0xFF, 0xAF,
				0xAF, 0xFF, 0xBE, 0xBE, 0xFF, 0xCD, 0xCD, 0xFF,
				0xDC, 0xDC, 0xFF, 0xEB, 0xEB, 0xFF, 0xFA, 0xFA,
				0x18, 0xFF, 0x18, 0x27, 0xFF, 0x27, 0x35, 0xFF,
				0x35, 0x44, 0xFF, 0x44, 0x53, 0xFF, 0x53, 0x62,
				0xFF, 0x62, 0x70, 0xFF, 0x70, 0x7F, 0xFF, 0x7F,
				0x8E, 0xFF, 0x8E, 0x9D, 0xFF, 0x9D, 0xAB, 0xFF,
				0xAB, 0xBA, 0xFF, 0xBA, 0xC9, 0xFF, 0xC9, 0xD8,
				0xFF, 0xD8, 0xE6, 0xFF, 0xE6, 0xF5, 0xFF, 0xF5,
				0xFF, 0xFF, 0x18, 0xFF, 0xFF, 0x27, 0xFF, 0xFF,
				0x35, 0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0x53, 0xFF,
				0xFF, 0x62, 0xFF, 0xFF, 0x70, 0xFF, 0xFF, 0x7F,
				0xFF, 0xFF, 0x8E, 0xFF, 0xFF, 0x9D, 0xFF, 0xFF,
				0xAB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xC9, 0xFF,
				0xFF, 0xD8, 0xFF, 0xFF, 0xE6, 0xFF, 0xFF, 0xF5,
				0xFF, 0x18, 0xFF, 0xFF, 0x27, 0xFF, 0xFF, 0x35,
				0xFF, 0xFF, 0x44, 0xFF, 0xFF, 0x53, 0xFF, 0xFF,
				0x62, 0xFF, 0xFF, 0x70, 0xFF, 0xFF, 0x7F, 0xFF,
				0xFF, 0x8E, 0xFF, 0xFF, 0x9D, 0xFF, 0xFF, 0xAB,
				0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xC9, 0xFF, 0xFF,
				0xD8, 0xFF, 0xFF, 0xE6, 0xFF, 0xFF, 0xF5, 0xFF,
				0x04, 0x10, 0x60, 0x06, 0x19, 0x6B, 0x08, 0x22,
				0x75, 0x0A, 0x2A, 0x80, 0x0B, 0x33, 0x8A, 0x0D,
				0x3C, 0x95, 0x0F, 0x45, 0xA0, 0x11, 0x4E, 0xAA,
				0x13, 0x56, 0xB5, 0x15, 0x5F, 0xBF, 0x17, 0x68,
				0xCA, 0x19, 0x71, 0xD5, 0x1A, 0x7A, 0xDF, 0x1C,
				0x82, 0xEA, 0x1E, 0x8B, 0xF4, 0x20, 0x94, 0xFF,
				0x60, 0x08, 0x00, 0x6B, 0x0A, 0x00, 0x75, 0x0B,
				0x00, 0x80, 0x0D, 0x00, 0x8A, 0x0E, 0x00, 0x95,
				0x10, 0x00, 0xA0, 0x12, 0x00, 0xAA, 0x13, 0x00,
				0xB5, 0x15, 0x00, 0xBF, 0x16, 0x00, 0xCA, 0x18,
				0x00, 0xD5, 0x1A, 0x00, 0xDF, 0x1B, 0x00, 0xEA,
				0x1D, 0x00, 0xF4, 0x1E, 0x00, 0xFF, 0x20, 0x00,
				0x10, 0x60, 0x00, 0x0F, 0x69, 0x02, 0x0E, 0x71,
				0x04, 0x0D, 0x7A, 0x06, 0x0C, 0x82, 0x09, 0x0B,
				0x8B, 0x0B, 0x0A, 0x93, 0x0D, 0x09, 0x9C, 0x0F,
				0x07, 0xA4, 0x11, 0x06, 0xAD, 0x13, 0x05, 0xB5,
				0x15, 0x04, 0xBE, 0x17, 0x03, 0xC6, 0x1A, 0x02,
				0xCF, 0x1C, 0x01, 0xD7, 0x1E, 0x00, 0xE0, 0x20,
				0x60, 0x30, 0x00, 0x6B, 0x37, 0x02, 0x75, 0x3D,
				0x04, 0x80, 0x44, 0x06, 0x8A, 0x4B, 0x09, 0x95,
				0x51, 0x0B, 0xA0, 0x58, 0x0D, 0xAA, 0x5F, 0x0F,
				0xB5, 0x65, 0x11, 0xBF, 0x6C, 0x13, 0xCA, 0x73,
				0x15, 0xD5, 0x79, 0x17, 0xDF, 0x80, 0x1A, 0xEA,
				0x87, 0x1C, 0xF4, 0x8D, 0x1E, 0xFF, 0x94, 0x20,
				0x60, 0x08, 0x60, 0x6A, 0x07, 0x6A, 0x74, 0x07,
				0x74, 0x7E, 0x06, 0x7E, 0x89, 0x06, 0x89, 0x93,
				0x05, 0x93, 0x9D, 0x05, 0x9D, 0xA7, 0x04, 0xA7,
				0xB1, 0x04, 0xB1, 0xBB, 0x03, 0xBB, 0xC5, 0x03,
				0xC5, 0xCF, 0x02, 0xCF, 0xDA, 0x02, 0xDA, 0xE4,
				0x01, 0xE4, 0xEE, 0x01, 0xEE, 0xF8, 0x00, 0xF8,
				0xFF, 0xA4, 0x08, 0xFF, 0xAA, 0x0F, 0xFF, 0xB0,
				0x16, 0xFF, 0xB6, 0x1E, 0xFF, 0xBC, 0x25, 0xFF,
				0xC2, 0x2C, 0xFF, 0xC8, 0x33, 0xFF, 0xCE, 0x3A,
				0xFF, 0xD5, 0x42, 0xFF, 0xDB, 0x49, 0xFF, 0xE1,
				0x50, 0xFF, 0xE7, 0x57, 0xFF, 0xED, 0x5E, 0xFF,
				0xF3, 0x66, 0xFF, 0xF9, 0x6D, 0xFF, 0xFF, 0x74,
				0x18, 0x18, 0x18, 0x26, 0x26, 0x26, 0x35, 0x35,
				0x35, 0x43, 0x43, 0x43, 0x52, 0x52, 0x52, 0x60,
				0x60, 0x60, 0x6E, 0x6E, 0x6E, 0x7D, 0x7D, 0x7D,
				0x8B, 0x8B, 0x8B, 0x9A, 0x9A, 0x9A, 0xA8, 0xA8,
				0xA8, 0xB6, 0xB6, 0xB6, 0xC5, 0xC5, 0xC5, 0xD3,
				0xD3, 0xD3, 0xE2, 0xE2, 0xE2, 0xF0, 0xF0, 0xF0};
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
  : TForm(Owner)
{
  for (int i=0;i<256;i++)
  {
    palette[i][0] = Def_RGB[i*3+0];
    palette[i][1] = Def_RGB[i*3+1];
    palette[i][2] = Def_RGB[i*3+2];
  }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::DrawGrid1DrawCell(TObject *Sender, int ACol,
      int ARow, TRect &Rect, TGridDrawState State)
{
TRect R = Rect;
int borderspace = 2;
R.Left+=borderspace;
R.Right-=borderspace;
R.Top+=borderspace;
R.Bottom-=borderspace;
RECT r=R;
r.left=R.Left-borderspace;
r.top=R.Top-borderspace;
r.right=R.Right+borderspace;
r.bottom=R.Bottom+borderspace;
DrawEdge(DrawGrid1->Canvas->Handle,&r,BDR_SUNKENOUTER,BF_RECT);
R.Left--;
R.Top--;
R.Right++;
R.Bottom++;
BYTE c_r=0,c_g=0,c_b=0;
c_r=palette[calcoffset(ACol,ARow,2)][0];
c_g=palette[calcoffset(ACol,ARow,2)][1];
c_b=palette[calcoffset(ACol,ARow,2)][2];
DrawGrid1->Canvas->Brush->Color = TColor(RGB(c_r,c_g,c_b));
DrawGrid1->Canvas->FillRect(R);
//if (DrawGrid1->Focused())
/*{
if (State.Contains(gdSelected))
{
DrawGrid1->Canvas->Pen->Color = TColor(RGB(0,0,0));
DrawGrid1->Canvas->DrawFocusRect(R);
}
}  */
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormPaint(TObject *Sender)
{
RECT r;
r.left=10;
r.top=10;
r.right=200;
r.bottom=200;
//DrawEdge(Canvas->Handle,&r, BDR_SUNKENOUTER ,  BF_RECT); //BDR_SUNKENINNER,BF_SOFT|BF_RECT);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
Image1->Canvas->StretchDraw(Rect(0,0,ClientWidth*3,ClientHeight*3),GetFormImage());
}
//---------------------------------------------------------------------------

void __fastcall TForm1::DrawGrid1MouseUp(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{
BYTE c_r=0,c_g=0,c_b=0;
int ACol=0,ARow=0;
DrawGrid1->MouseToCell(X,Y,ACol,ARow);
//ACol = DrawGrid1->Col;
//ARow = DrawGrid1->Row;
c_r=palette[calcoffset(ACol,ARow,2)][0];
c_g=palette[calcoffset(ACol,ARow,2)][1];
c_b=palette[calcoffset(ACol,ARow,2)][2];
COLORREF color = RGB(c_r,c_g,c_b);
if (Button == mbLeft)
{
  FGShape->Brush->Color = TColor(color);
} else
if (Button == mbMiddle)
{

} else
if (Button == mbRight)
{
  BGShape->Brush->Color = TColor(color);
}

if (FGShape->Brush->Color == TColor(clBlack))
 FGShape->Pen->Color = TColor(clWhite);
else
 FGShape->Pen->Color = TColor(clBlack);

if (BGShape->Brush->Color == TColor(clBlack))
 BGShape->Pen->Color = TColor(clWhite);
else
 BGShape->Pen->Color = TColor(clBlack);

}
//---------------------------------------------------------------------------








void __fastcall TForm1::BGShapeMouseDown(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{
BGColor->Color = BGShape->Brush->Color;
if (BGColor->Execute())
{
BGShape->Brush->Color = BGColor->Color;

if (BGShape->Brush->Color == TColor(clBlack))
 BGShape->Pen->Color = TColor(clWhite);
else
 BGShape->Pen->Color = TColor(clBlack);
}
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FGShapeMouseDown(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{
FGColor->Color = FGShape->Brush->Color;
if (FGColor->Execute())
{
FGShape->Brush->Color = FGColor->Color;

if (FGShape->Brush->Color == TColor(clBlack))
 FGShape->Pen->Color = TColor(clWhite);
else
 FGShape->Pen->Color = TColor(clBlack);
}
}
//---------------------------------------------------------------------------



